---
title: "CAfe.Lab - para Analisar & Acolher"
author: "Dr. William Melo | `versao 1`"
format:
  dashboard:
    theme:
      - united
      - custom.scss
    logo: "images/logo.png"
    nav-buttons:
      - icon: linkedin
        href: "https://www.linkedin.com/in/williamcorreademelo/"
      - icon: twitter
        href: "https://twitter.com/williamcorrearj"
      - icon: github
        href: "https://github.com/profwilliammelo"
      - icon: instagram
        href: "https://instagram.com/profwilliammelo"
    scrolling: true
    orientation: rows
server: shiny
---




```{r setup, include=FALSE}
# Bibliotecas principais
library(shiny)
library(tidyverse)
library(DT)
library(httr)
library(stringr)  # Necessário para usar str_trim
```

```{r server}
#| context: server

# -----------------------------------------------------------------------------
# SERVIDOR - Código atualizado
# -----------------------------------------------------------------------------

# Carrega as bibliotecas necessárias
library(shiny)
library(tidyverse)
library(DT)
library(rlang)         # Para manipular estéticas dinâmicas (ex: sym)
library(stringr)       # Para limpeza dos nomes das colunas
library(googlesheets4) # Para ler dados diretamente das planilhas do Google

# Autentica usando o arquivo de credenciais (certifique-se de que o JSON não está no Git)
gs4_auth(path = "rwilliammelo-70207e3cde8b.json")

# -----------------------------------------------------------------------------
# 1) Definindo os IDs das planilhas do Google Sheets
#    (Os rótulos à esquerda servem apenas para identificar cada planilha)
# -----------------------------------------------------------------------------
sheet_ids <- c(
  "711" = "1HMjzbAKyDCvJh9CO8T2isGA04EjVoHlCgnzgu-s1mh0",
  "712" = "1b_39FjRINpB6ybTrHZ1-j41CBzHqYIOozx_4RtUY9bY",
  "713" = "17u8yE9tIieA7VsojilEJXANirXjKceF80y3AXzBXORo",
  "621" = "16s2R-poDNNnd2SMwuq5HIsRmD8ax1J4nI2AABi-bCs4",
  "624" = "1Q0yiIRIgsnLAytPVRtwe8_-RbRILRb2-HUEsztc89Rk"
)

# -----------------------------------------------------------------------------
# 2) Lista de colunas de metadados (para conversão em texto, se aplicável)
#    Adicionamos "nome_estudante" para possibilitar o filtro individual.
# -----------------------------------------------------------------------------
colunas_metadados <- c(
  "turma", "data_matricula", "situ_matricula", "pcd_transtornos", 
  "obs", "serie", "genero", "cor", "mora_com_quem", 
  "lugar_tranquilo_estudo", "tristeza_com_frequencia", 
  "ansiedade_preocupacao_com_frequencia", "alegria_felicidade_com_frequencia",
  "recursos_casa", "nome_estudante"
)

# -----------------------------------------------------------------------------
# 3) Função para ler uma única planilha usando googlesheets4
#    - Lê os dados e converte os nomes das colunas para minúsculas, sem espaços.
#    - Converte as colunas de metadados para texto.
# -----------------------------------------------------------------------------
ler_uma_planilha <- function(sheet_id, sheet_label) {
  df <- tryCatch(
    {
      read_sheet(sheet_id)
    },
    error = function(e) {
      stop(paste0("Erro ao ler a planilha '", sheet_label, "': ", e$message))
    }
  )
  
  # Converte nomes das colunas para minúsculas e remove espaços extras
  nomes_corrigidos <- str_trim(tolower(names(df)))
  names(df) <- nomes_corrigidos
  
  # Converte as colunas de metadados para character, se existirem
  df <- df %>% mutate(across(any_of(colunas_metadados), as.character))
  
  return(df)
}

# -----------------------------------------------------------------------------
# 4) Função para carregar todos os dados (simplificada)
#    - Lê cada planilha e converte as colunas de indicadores (terminadas em _primeirobi, etc.)
#      para numeric.
#    - Empilha os dados de todas as planilhas e transforma os dados de wide para long,
#      pivotando somente as colunas de indicadores dos 4 bimestres.
# -----------------------------------------------------------------------------
carregar_dados <- function() {
  # Lê as planilhas; imap() percorre cada elemento da lista, passando o valor e o nome
  lista_dfs <- purrr::imap(sheet_ids, ler_uma_planilha)
  
  # Converte as colunas de indicadores para numeric (já em minúsculas)
  lista_dfs <- lapply(lista_dfs, function(df) {
    df %>%
      mutate(across(
        matches("_(primeirobi|segundobi|terceirobi|quartobi)$"),
        ~ suppressWarnings(as.numeric(.))
      ))
  })
  
  # Empilha todos os dataframes, mantendo a coluna "fonteturma"
  dados_unidos <- bind_rows(lista_dfs, .id = "fonteturma")
  
  # Define explicitamente as colunas de indicadores a pivotar (nomes em minúsculas)
  colunas_pivot <- c(
    # Primeiro Bimestre
    "numero_presencas_primeirobi", "numero_faltas_primeirobi", "percentual_presencas_primeirobi",
    "av1_c.1_fala_escuta_primeirobi", "av1_c.2_colaboracao_primeirobi", "av1_c.3_presenca_primeirobi",
    "av1_c.4_foco_primeirobi", "av1_c.5_comprometimento_primeirobi", "av1_c.6_material_primeirobi",
    "notaav1_media_percentual_primeirobi", "notaav1_primeirobi",
    "quizz_primeirobi", "fez_quizz_primeirobi",
    "percentual_atividades_feitas_av2_primeirobi", "notaav2_media_percentual_primeirobi",
    "notaav2_primeirobi", "notaav3_primeirobi",
    
    # Segundo Bimestre
    "numero_presencas_segundobi", "numero_faltas_segundobi", "percentual_presencas_segundobi",
    "av1_c.1_fala_escuta_segundobi", "av1_c.2_colaboracao_segundobi", "av1_c.3_presenca_segundobi",
    "av1_c.4_foco_segundobi", "av1_c.5_comprometimento_segundobi", "av1_c.6_material_segundobi",
    "notaav1_media_percentual_segundobi", "notaav1_segundobi",
    "quizz_segundobi", "fez_quizz_segundobi",
    "percentual_atividades_feitas_av2_segundobi", "notaav2_media_percentual_segundobi",
    "notaav2_segundobi", "notaav3_segundobi"
    
    # # Terceiro Bimestre
    # "numero_presencas_terceirobi", "numero_faltas_terceirobi", "percentual_presencas_terceirobi",
    # "av1_c.1_fala_escuta_terceirobi", "av1_c.2_colaboracao_terceirobi", "av1_c.3_presenca_terceirobi",
    # "av1_c.4_foco_terceirobi", "av1_c.5_comprometimento_terceirobi", "av1_c.6_material_terceirobi",
    # "notaav1_media_percentual_terceirobi", "notaav1_terceirobi",
    # "quizz_terceirobi", "fez_quizz_terceirobi",
    # "percentual_atividades_feitas_av2_terceirobi", "notaav2_media_percentual_terceirobi",
    # "notaav2_terceirobi", "notaav3_terceirobi",
    # 
    # # Quarto Bimestre
    # "numero_presencas_quartobi", "numero_faltas_quartobi", "percentual_presencas_quartobi",
    # "av1_c.1_fala_escuta_quartobi", "av1_c.2_colaboracao_quartobi", "av1_c.3_presenca_quartobi",
    # "av1_c.4_foco_quartobi", "av1_c.5_comprometimento_quartobi", "av1_c.6_material_quartobi",
    # "notaav1_media_percentual_quartobi", "notaav1_quartobi",
    # "quizz_quartobi", "fez_quizz_quartobi",
    # "percentual_atividades_feitas_av2_quartobi", "notaav2_media_percentual_quartobi",
    # "notaav2_quartobi", "notaav3_quartobi"
  )
  
  # Pivot_longer: transforma as colunas de indicadores de wide para long,
  # extraindo a parte do indicador e o sufixo do bimestre
  dados_final <- dados_unidos %>%
    pivot_longer(
      cols = all_of(colunas_pivot),
      names_to = c("tipoindicador", "bimestreb"),
      names_pattern = "^(.*)_(primeirobi|segundobi|terceirobi|quartobi)$",
      values_to = "Valor"
    ) %>%
    mutate(
      bimestre = case_when(
        bimestreb == "primeirobi"  ~ "1º Bimestre",
        bimestreb == "segundobi"   ~ "2º Bimestre",
        bimestreb == "terceirobi"  ~ "3º Bimestre",
        bimestreb == "quartobi"    ~ "4º Bimestre",
        TRUE ~ NA_character_
      ),
      # Renomeia explicitamente os indicadores para "Tipo de Indicador"
      tipoindicador = case_when(
        tipoindicador == "numero_presencas" ~ "Número de Presenças",
        tipoindicador == "numero_faltas" ~ "Número de Faltas",
        tipoindicador == "percentual_presencas" ~ "Percentual de Presenças",
        tipoindicador == "av1_c.1_fala_escuta" ~ "AV1 - Fala e Escuta",
        tipoindicador == "av1_c.2_colaboracao" ~ "AV1 - Colaboração",
        tipoindicador == "av1_c.3_presenca" ~ "AV1 - Presença",
        tipoindicador == "av1_c.4_foco" ~ "AV1 - Foco",
        tipoindicador == "av1_c.5_comprometimento" ~ "AV1 - Comprometimento",
        tipoindicador == "av1_c.6_material" ~ "AV1 - Uso de Material",
        tipoindicador == "notaav1_media_percentual" ~ "AV1 - Média Percentual",
        tipoindicador == "notaav1" ~ "AV1 - Nota Final",
        tipoindicador == "quizz" ~ "Quizz - Avaliação",
        tipoindicador == "fez_quizz" ~ "Quizz - Fez",
        tipoindicador == "percentual_atividades_feitas_av2" ~ "AV2 - Percentual de Atividades Feitas",
        tipoindicador == "notaav2_media_percentual" ~ "AV2 - Média Percentual",
        tipoindicador == "notaav2" ~ "AV2 - Nota Final",
        tipoindicador == "notaav3" ~ "AV3 - Nota Final",
        TRUE ~ tipoindicador
      )
    ) %>%
    select(-bimestreb)
  
  message("=== Colunas finais do dataframe unificado ===")
  message(paste(names(dados_final), collapse = ", "))
  
  return(dados_final)
}

# -----------------------------------------------------------------------------
# 5) Cria um objeto reativo para armazenar os dados unificados
# -----------------------------------------------------------------------------
dados <- reactiveVal()

# -----------------------------------------------------------------------------
# 6) Carrega os dados automaticamente ao iniciar a aplicação (somente uma vez)
# -----------------------------------------------------------------------------
observeEvent(TRUE, {
  dados(carregar_dados())
}, once = TRUE)

# -----------------------------------------------------------------------------
# 7) Atualiza os dados ao clicar no botão "Atualizar Dados"
# -----------------------------------------------------------------------------
observeEvent(input$atualizar, {
  showModal(modalDialog(
    title = "Atualizando Dados",
    div(
      class = "text-center",
      tags$div(
        class = "spinner-border text-primary", 
        role  = "status",
        tags$span(class = "visually-hidden", "Carregando...")
      ),
      p("Aguarde enquanto os dados são atualizados.")
    ),
    footer = NULL,
    easyClose = FALSE
  ))
  
  tryCatch({
    dados(carregar_dados())
  }, error = function(e) {
    showModal(modalDialog(
      title = "Erro ao Atualizar",
      p(e$message),
      easyClose = TRUE,
      footer = NULL
    ))
  })
  
  removeModal()
})

# -----------------------------------------------------------------------------
# 8) Observers para atualizar as listas de seleção (Turma, Aluno e Tipo de Indicador)
# -----------------------------------------------------------------------------

# 8.1) Atualiza as opções de Turma para os painéis Agregado e Individual
observe({
  df <- req(dados())
  
  if (!"turma" %in% names(df)) {
    showNotification("A coluna 'turma' não foi encontrada!", type = "warning")
    updateSelectInput(session, "turma_agregado", choices = "Todas", selected = "Todas")
    updateSelectInput(session, "turma_individual", choices = "Todas", selected = "Todas")
    return()
  }
  
  lista_turmas <- sort(unique(df$turma))
  lista_turmas <- if(length(lista_turmas) == 0) "Todas" else c("Todas", lista_turmas)
  
  updateSelectInput(session, "turma_agregado", choices = lista_turmas, selected = "Todas")
  updateSelectInput(session, "turma_individual", choices = lista_turmas, selected = "Todas")
  updateSelectInput(session, "turma_regressao", choices = lista_turmas, selected = "Todas")
})

# 8.2) Atualiza a lista de Alunos conforme a Turma selecionada no painel Individual
observe({
  df <- req(dados())
  
  if ("turma" %in% names(df) && input$turma_individual != "Todas") {
    df <- df %>% filter(turma == input$turma_individual)
  }
  
  if (!"nome_estudante" %in% names(df)) {
    showNotification("A coluna 'nome_estudante' não existe!", type = "warning")
    updateSelectInput(session, "nome_estudante", choices = "Nenhum", selected = "Nenhum")
    return()
  }
  
  lista_alunos <- sort(unique(df$nome_estudante))
  lista_alunos <- if(length(lista_alunos) == 0) "Nenhum" else lista_alunos
  
  updateSelectInput(session, "nome_estudante", choices = lista_alunos, selected = lista_alunos[1])
})

# 8.3) Atualiza a lista de Indicadores (conforme definido no pivot_longer)  
observe({
  df <- req(dados())
  
  if (!"tipoindicador" %in% names(df)) {
    showNotification("A coluna 'tipoindicador' não foi detectada!", type = "warning")
    updateSelectInput(session, "atividade_agregado", choices = "Todos", selected = "Todos")
    updateSelectInput(session, "atividade_individual", choices = "Todos", selected = "Todos")
    return()
  }
  
  lista_indicadores <- sort(unique(df$tipoindicador))
  lista_indicadores <- if(length(lista_indicadores) == 0) "Nenhum" else lista_indicadores
  
  updateSelectInput(session, "atividade_agregado", choices = c("Todos", lista_indicadores), selected = "Todos")
  updateSelectInput(session, "atividade_individual", choices = c("Todos", lista_indicadores), selected = "Todos")
})

# -----------------------------------------------------------------------------
# 9) Saídas: Tabelas e Gráficos
# -----------------------------------------------------------------------------

# 9.1) Tabela Agregada: Resumo por Bimestre (com opção de agrupamento por característica)
output$tabela_agregado <- DT::renderDT({
  df <- req(dados())
  
  # Aplica os filtros de Turma e Indicador, se selecionados
  if ("turma" %in% names(df) && input$turma_agregado != "Todas") {
    df <- df %>% filter(turma == input$turma_agregado)
  }
  if ("tipoindicador" %in% names(df) && input$atividade_agregado != "Todos") {
    df <- df %>% filter(tipoindicador == input$atividade_agregado)
  }
  
  if (nrow(df) == 0) {
    return(datatable(data.frame(Mensagem = "Sem dados para exibir.")))
  }
  
  # df <- df %>% filter(is.finite(Valor)) comentado para incluir todo tipo de valor
  
  if (input$criterio_color == "Nenhum" || !(input$criterio_color %in% names(df))) {
    df_resumo <- df %>%
      group_by(bimestre) %>%
      summarise(ValorMedio = mean(Valor, na.rm = TRUE), .groups = "drop")
  } else {
    var_color <- rlang::sym(input$criterio_color)
    df_resumo <- df %>%
      group_by(bimestre, !!var_color) %>%
      summarise(ValorMedio = mean(Valor, na.rm = TRUE), .groups = "drop")
  }
  
  datatable(df_resumo, extensions = 'Buttons',
    options = list(
      dom = 'Bfrtip',
      buttons = c('copy', 'csv', 'excel', 'pdf', 'print'),
      pageLength = 100,
      lengthMenu = c(5,10,25,50,100),
      autoWidth = TRUE,
      language = list(
        search = "Pesquisar:",
        lengthMenu = "Mostrar _MENU_ registros",
        info = "Mostrando _START_ até _END_ de _TOTAL_ registros",
        infoEmpty = "Mostrando 0 até 0 de 0 registros",
        infoFiltered = "(filtrado de _MAX_ registros)",
        paginate = list(previous = "Anterior", `next` = "Próximo")
      )
    ),
    filter = 'top'
  )
  
})



# 9.2) Gráfico Agregado: Boxplot por Bimestre com opção de colorir
output$grafico_agregado <- renderPlot({
  df <- req(dados())
  
  if ("turma" %in% names(df) && input$turma_agregado != "Todas") {
    df <- df %>% filter(turma == input$turma_agregado)
  }
  if ("tipoindicador" %in% names(df) && input$atividade_agregado != "Todos") {
    df <- df %>% filter(tipoindicador == input$atividade_agregado)
  }
  
  # df <- df %>% filter(is.finite(Valor)) comentado para incluir todo tipo de valor
  req(nrow(df) > 0)
  
  if (input$criterio_color == "Nenhum" || !(input$criterio_color %in% names(df))) {
    ggplot(df, aes(x = bimestre, y = Valor)) +
      geom_boxplot() +
      labs(
        title = "Distribuição de Valores por Bimestre (Boxplot)",
        x = "Bimestre",
        y = "Valor"
      )
  } else {
    var_color <- rlang::sym(input$criterio_color)
    ggplot(df, aes(x = bimestre, y = Valor, fill = factor(!!var_color))) +
      geom_boxplot() +
      labs(
        title = paste("Boxplot por Bimestre e por", input$criterio_color),
        x = "Bimestre",
        y = "Valor",
        fill = input$criterio_color
      )
  }
})

# 9.3) Gráfico Agregado Temporal: Evolução da Média por Bimestre (agora em colunas com geom_label, sem legenda)
output$grafico_agregado_tempo <- renderPlot({
  df <- req(dados())
  
  # Filtro por turma e indicador, se selecionados
  if ("turma" %in% names(df) && input$turma_agregado != "Todas") {
    df <- df %>% filter(turma == input$turma_agregado)
  }
  if ("tipoindicador" %in% names(df) && input$atividade_agregado != "Todos") {
    df <- df %>% filter(tipoindicador == input$atividade_agregado)
  }
  
  req(nrow(df) > 0)
  
  # Calcula média por Bimestre (e possivelmente a característica de cor)
  if (input$criterio_color == "Nenhum" || !(input$criterio_color %in% names(df))) {
    # Sem cor
    df_colunas <- df %>%
      group_by(bimestre) %>%
      summarise(Media = mean(Valor, na.rm = TRUE), .groups = "drop")
    
    ggplot(df_colunas, aes(x = bimestre, y = Media)) +
      geom_col(width = 0.6, fill = "skyblue", color = "black", show.legend = FALSE) +
      geom_label(aes(label = round(Media, 2)), vjust = -0.2, show.legend = FALSE) +
      labs(
        title = "Evolução da Média por Bimestre (Colunas)",
        x = "Bimestre",
        y = "Média"
      ) +
      theme(legend.position = "none")  # Remove também a área da legenda, se surgir
  } else {
    # Com cor
    var_color <- rlang::sym(input$criterio_color)
    df_colunas <- df %>%
      group_by(bimestre, !!var_color) %>%
      summarise(Media = mean(Valor, na.rm = TRUE), .groups = "drop")
    
    ggplot(df_colunas, aes(x = bimestre, y = Media, fill = factor(!!var_color))) +
      geom_col(position = position_dodge(width = 0.8), width = 0.6, color = "black") +
      geom_label(
        aes(label = round(Media, 2), group = factor(!!var_color)), 
        position = position_dodge(width = 0.8), 
        vjust = -0.2,
        show.legend = FALSE
      ) +
      labs(
        title = paste("Evolução da Média por Bimestre e por", input$criterio_color),
        x = "Bimestre",
        y = "Média",
        fill = input$criterio_color
      )  }
})



# 9.4) Tabela Agregada por Grupo: Média agregada por grupo escolhido (característica)
output$tabela_agregado_grupo <- DT::renderDT({
  df <- req(dados())
  
  if ("turma" %in% names(df) && input$turma_agregado != "Todas") {
    df <- df %>% filter(turma == input$turma_agregado)
  }
  if ("tipoindicador" %in% names(df) && input$atividade_agregado != "Todos") {
    df <- df %>% filter(tipoindicador == input$atividade_agregado)
  }
  
  # df <- df %>% filter(is.finite(Valor)) comentado para incluir todo tipo de valor
  
  if (input$criterio_color == "Nenhum" || !(input$criterio_color %in% names(df))) {
    return(datatable(data.frame(Mensagem = "Nenhuma característica selecionada para agrupar.")))
  }
  
  var_color <- rlang::sym(input$criterio_color)
  df_resumo <- df %>%
    group_by(bimestre, !!var_color) %>%
    summarise(Media = mean(Valor, na.rm = TRUE), .groups = "drop")
  
  datatable(df_resumo, extensions = 'Buttons',
    options = list(
      dom = 'Bfrtip',
      buttons = c('copy', 'csv', 'excel', 'pdf', 'print'),
      pageLength = 100,
      lengthMenu = c(5,10,25,50,100),
      autoWidth = TRUE,
      language = list(
        search = "Pesquisar:",
        lengthMenu = "Mostrar _MENU_ registros",
        info = "Mostrando _START_ até _END_ de _TOTAL_ registros",
        infoEmpty = "Mostrando 0 até 0 de 0 registros",
        infoFiltered = "(filtrado de _MAX_ registros)",
        paginate = list(previous = "Anterior", `next` = "Próximo")
      )
    ),
    filter = 'top')
})


# 9.5) Tabela Individual: Dados de Notas/Valores do Aluno com Botões de Download e Filtro
output$tabela_nota_individual <- DT::renderDT({
  df <- req(dados())
  
  # Filtra por turma, se aplicável
  if ("turma" %in% names(df) && input$turma_individual != "Todas") {
    df <- df %>% filter(turma == input$turma_individual)
  }
  
  # Verifica e filtra pelo aluno selecionado
  if (!"nome_estudante" %in% names(df)) {
    showNotification("A coluna 'nome_estudante' não existe no dataframe!", type = "error")
    return(invisible(NULL))
  }
  df <- df %>% filter(nome_estudante == input$nome_estudante)
  
  # Filtra pelo tipo de indicador (atividade) selecionado, se for diferente de "Todos"
  if ("tipoindicador" %in% names(df) && input$atividade_individual != "Todos") {
    df <- df %>% filter(tipoindicador == input$atividade_individual)
  }
  
  # Considera somente valores numéricos válidos
  # df <- df %>% filter(is.finite(Valor)) comentado para incluir todo tipo de valor
  req(nrow(df) > 0)
  
  # Seleciona somente as colunas de interesse (que foram exibidas no gráfico)
  df <- df %>% select(nome_estudante, turma, bimestre, tipoindicador, Valor)
  
  # Renderiza a tabela com filtros e botões de download
  datatable(
    df, 
    extensions = 'Buttons',
    options = list(
      dom = 'Bfrtip',
      buttons = c('copy', 'csv', 'excel', 'pdf', 'print'),
      pageLength = 100,
      lengthMenu = c(5,10,25,50,100),
      autoWidth = TRUE,
      language = list(
        search = "Pesquisar:",
        lengthMenu = "Mostrar _MENU_ registros",
        info = "Mostrando _START_ até _END_ de _TOTAL_ registros",
        infoEmpty = "Mostrando 0 até 0 de 0 registros",
        infoFiltered = "(filtrado de _MAX_ registros)",
        paginate = list(previous = "Anterior", `next` = "Próximo")
      )
    ),
    filter = 'top'
  )
})





# 9.6) Gráfico Individual: Evolução das Notas (média por Bimestre) em colunas
output$grafico_individual_linhas <- renderPlot({
  df <- req(dados())
  
  # Filtro por turma, se aplicável
  if ("turma" %in% names(df) && input$turma_individual != "Todas") {
    df <- df %>% filter(turma == input$turma_individual)
  }
  
  # Verifica se a coluna 'nome_estudante' existe e filtra pelo aluno
  if (!"nome_estudante" %in% names(df)) {
    showNotification("A coluna 'nome_estudante' não existe no dataframe!", type = "error")
    return(invisible(NULL))
  }
  df <- df %>% filter(nome_estudante == input$nome_estudante)
  
  # Filtro por tipo de indicador (atividade), se não for 'Todos'
  if ("tipoindicador" %in% names(df) && input$atividade_individual != "Todos") {
    df <- df %>% filter(tipoindicador == input$atividade_individual)
  }
  
  req(nrow(df) > 0)
  
  # Calcula a média da nota por Bimestre
  df_evolucao <- df %>%
    group_by(bimestre) %>%
    summarise(MediaBim = mean(Valor, na.rm = TRUE), .groups = "drop")
  
  # Gráfico de colunas com rótulos das médias
  ggplot(df_evolucao, aes(x = bimestre, y = MediaBim)) +
    geom_col(
      width = 0.6, fill = "skyblue", color = "black",
      show.legend = FALSE
    ) +
    geom_label(
      aes(label = round(MediaBim, 2)),
      vjust = -0.3,
      show.legend = FALSE
    ) +
    labs(
      title = paste("Evolução do indicador -", input$atividade_individual, "para", input$nome_estudante),
      x = "Bimestre",
      y = "Média das Notas"
    ) +
    theme(legend.position = "none")
})


# 9.7) Tabela Individual: Dados filtrados do aluno
output$tabela_individual <- DT::renderDT({
  df <- req(dados())
  
  if ("turma" %in% names(df) && input$turma_individual != "Todas") {
    df <- df %>% filter(turma == input$turma_individual)
  }
  
  if (!"nome_estudante" %in% names(df)) {
    return(datatable(data.frame(Mensagem = "A coluna 'nome_estudante' não existe.")))
  }
  
  df <- df %>% filter(nome_estudante == input$nome_estudante)
  
  if ("tipoindicador" %in% names(df) && input$atividade_individual != "Todos") {
    df <- df %>% filter(tipoindicador == input$atividade_individual)
  }
  
  if (nrow(df) == 0) {
    return(datatable(data.frame(Mensagem = "Sem dados para exibir.")))
  }
  
  datatable(df, extensions = 'Buttons',
    options = list(
      dom = 'Bfrtip',
      buttons = c('copy', 'csv', 'excel', 'pdf', 'print'),
      pageLength = 100,
      lengthMenu = c(5,10,25,50,100),
      autoWidth = TRUE,
      language = list(
        search = "Pesquisar:",
        lengthMenu = "Mostrar _MENU_ registros",
        info = "Mostrando _START_ até _END_ de _TOTAL_ registros",
        infoEmpty = "Mostrando 0 até 0 de 0 registros",
        infoFiltered = "(filtrado de _MAX_ registros)",
        paginate = list(previous = "Anterior", `next` = "Próximo")
      )
    ),
    filter = 'top')
})

# 9.8) Tabela: Estudantes em Atenção 
output$estudantes_atencao <- DT::renderDT({
  req(input$bimestre_atencao)  # Bimestre ou 'Todos'

  # Carrega a base original
  df_base <- dados() %>%
    filter(
      tipoindicador %in% c("AV2 - Nota Final", "AV3 - Nota Final", "Quizz - Fez", "Quizz - Avaliação")
    ) %>%
    pivot_wider(
      names_from = tipoindicador,
      values_from = Valor
    ) %>%
    # Filtro: somente quem fez quizz
    filter(`Quizz - Fez` == 1)

  # Se for todos os bimestres, agrupamos para obter a média global
  if (input$bimestre_atencao == "Todos") {
    df_atencao <- df_base %>%
      group_by(nome_estudante, turma) %>%
      summarise(
        av2 = mean(`AV2 - Nota Final`, na.rm = TRUE),
        av3 = mean(`AV3 - Nota Final`, na.rm = TRUE),
        .groups = "drop"
      ) %>%
      # Filtro de atenção na média global
      filter(av2 < 3 | av3 < 5)

  } else {
    # Caso contrário, filtra somente o bimestre escolhido
    df_atencao <- df_base %>%
      filter(bimestre == input$bimestre_atencao) %>%
      # Aqui podemos NÃO agrupar se queremos ver nota por bimestre diretamente
      # Se preferir ver "cada aluno, bimestre por bimestre", não summarize
      filter(`AV2 - Nota Final` < 3 | `AV3 - Nota Final` < 5)
  }

  # Renderiza a tabela em português
  datatable(
    df_atencao,
    extensions = 'Buttons',
    options = list(
      dom = 'Bfrtip',
      buttons = c('copy', 'csv', 'excel', 'pdf', 'print'),
      pageLength = 100,
      lengthMenu = c(5,10,25,50,100),
      autoWidth = TRUE,
      language = list(
        search = "Pesquisar:",
        lengthMenu = "Mostrar _MENU_ registros",
        info = "Mostrando _START_ até _END_ de _TOTAL_ registros",
        infoEmpty = "Mostrando 0 até 0 de 0 registros",
        infoFiltered = "(filtrado de _MAX_ registros)",
        paginate = list(previous = "Anterior", `next` = "Próximo")
      )
    ),
    filter = 'top',
    caption = htmltools::tags$caption(
      style = 'caption-side: top; text-align: center;',
      if (input$bimestre_atencao == "Todos") {
        "Estudantes em Atenção (Todos os Bimestres) — Fez Quizz"
      } else {
        paste(
          "Estudantes em Atenção (AV2 < 3 ou AV3 < 5) — Fez Quizz —",
          input$bimestre_atencao
        )
      }
    )
  )
})




# 9.9) Tabela: Regressão Linear Refinada (para cada turma e bimestre selecionados)

output$regressao_refinada <- renderUI({
  req(input$turma_regressao, input$bimestre_regressao)
  
  if (input$turma_regressao == "Todas") {
    # Para "Todas" as turmas, filtra apenas pelo bimestre e indicador "Quizz - Avaliação"
    df_reg <- dados() %>%
      filter(bimestre == input$bimestre_regressao,
             tipoindicador == "Quizz - Avaliação") %>%
      droplevels()
    
    validate(
      need(nrow(df_reg) > 1, "Dados insuficientes para regressão.")
    )
    
    # Calcula variáveis agregadas por turma (percentuais)
    agg_vars <- dados() %>%
      filter(tipoindicador == "Quizz - Avaliação") %>%
      group_by(turma) %>%
      summarise(
        pct_masculino       = mean(genero == "masculino", na.rm = TRUE) * 100,
        pct_preto           = mean(cor == "preto", na.rm = TRUE) * 100,
        pct_lugar_tranquilo = mean(lugar_tranquilo_estudo == "sim", na.rm = TRUE) * 100,
        pct_tristeza        = mean(tristeza_com_frequencia == "sim", na.rm = TRUE) * 100,
        pct_ansiedade       = mean(ansiedade_preocupacao_com_frequencia == "sim", na.rm = TRUE) * 100,
        pct_alegria         = mean(alegria_felicidade_com_frequencia == "sim", na.rm = TRUE) * 100
      )
    
    # Junta os percentuais ao dataframe de regressão (cada observação recebe o valor agregado de sua turma)
    df_reg <- left_join(df_reg, agg_vars, by = "turma")
    
    # Ajusta o modelo hierárquico com efeito aleatório de turma, incluindo os preditores individuais
    # e as variáveis agregadas (como preditores de nível 2)
    if (!requireNamespace("lme4", quietly = TRUE)) {
      stop("O pacote lme4 precisa estar instalado para regressão hierárquica.")
    }
    modelo <- lme4::lmer(Valor ~ genero + cor + lugar_tranquilo_estudo + tristeza_com_frequencia +
                           ansiedade_preocupacao_com_frequencia + alegria_felicidade_com_frequencia +
                           pct_masculino + pct_preto + pct_lugar_tranquilo + pct_tristeza + pct_ansiedade + pct_alegria +
                           (1 | turma),
                         data = df_reg)
    
  } else {
    # Para uma turma específica, ajusta um modelo linear simples (sem as variáveis agregadas)
    df_reg <- dados() %>%
      filter(turma == input$turma_regressao,
             bimestre == input$bimestre_regressao,
             tipoindicador == "Quizz - Avaliação") %>%
      droplevels()
    
    validate(
      need(nrow(df_reg) > 1, "Dados insuficientes para regressão.")
    )
    
    modelo <- lm(Valor ~ genero + cor + lugar_tranquilo_estudo +
                   tristeza_com_frequencia + ansiedade_preocupacao_com_frequencia +
                   alegria_felicidade_com_frequencia,
                 data = df_reg)
  }
  
  # Gera a saída HTML da regressão usando model_summary do pacote modelsummary
  html_tab <- modelsummary::modelsummary(modelo, output = "html", stars = TRUE)
  
  HTML(as.character(html_tab))
})




# 10) Tabela: Base Completa
output$base_completa <- DT::renderDT({
  req(dados())  # Garante que dados() já foi carregado
  
  df <- dados()  # Pega todo o dataframe unificado
  
  datatable(
    df,
    extensions = 'Buttons',
    options = list(
      dom = 'Bfrtip',
      buttons = c('copy', 'csv', 'excel', 'pdf', 'print'),
      pageLength = 100,
      lengthMenu = c(5, 10, 25, 50, 100),
      autoWidth = TRUE,
      language = list(
        search = "Pesquisar:",
        lengthMenu = "Mostrar _MENU_ registros",
        info = "Mostrando _START_ até _END_ de _TOTAL_ registros",
        infoEmpty = "Mostrando 0 até 0 de 0 registros",
        infoFiltered = "(filtrado de _MAX_ registros)",
        paginate = list(previous = "Anterior", `next` = "Próximo")
      )
    ),
    filter = 'top'   # se quiser filtros de coluna no topo
  )
})






```

# Agregado

## {.sidebar}

```{r sidebar-ui, echo=FALSE}
# Painel de Análises Agregadas
h3("Análise Agregada")
selectInput(
  inputId = "turma_agregado",
  label   = "Selecione a Turma (Agregado)",
  choices = "Todas"
)
selectInput(
  inputId = "atividade_agregado",
  label   = "Selecione o indicador (Agregado)",
  choices = "Todas"
)
selectInput(
  inputId = "criterio_color",
  label   = "Desagregar por (característica social):",
  choices = c(
    "Nenhum", 
    "genero", 
    "cor", 
    "mora_com_quem",
    "lugar_tranquilo_estudo", 
    "tristeza_com_frequencia",
    "ansiedade_preocupacao_com_frequencia",
    "alegria_felicidade_com_frequencia", 
    "recursos_casa"
  ),
  selected = "Nenhum"
)

actionButton(
  inputId = "atualizar",
  label   = "Atualizar Dados"
)


hr()


```

## Agregado

```{r ui-agregado}
# Seções de saída do Painel "Agregado"
DTOutput("tabela_agregado")
plotOutput("grafico_agregado")
plotOutput("grafico_agregado_tempo")
```

# Individual

## {.sidebar}

```{r}

# Painel de Análises Individuais
h3("Análise Individual")
selectInput(
  inputId = "turma_individual",
  label   = "Selecione a Turma (Individual)",
  choices = "Todas"
)
selectInput(
  inputId = "nome_estudante",
  label   = "Selecione o Aluno",
  choices = NULL
)
selectInput(
  inputId = "atividade_individual",
  label   = "Selecione o indicador (Individual)",
  choices = "Todos"
)
actionButton(
  inputId = "atualizar",
  label   = "Atualizar Dados"
)

```

## Individual 

```{r ui-individual1}
# Seções de saída do Painel "Individual"

DTOutput("tabela_nota_individual")
```


```{r ui-individual2}
plotOutput("grafico_individual_linhas")
```


```{r ui-individual3}
DTOutput("tabela_individual")
```

# Análises refinadas

## {.sidebar}

```{r}

selectInput(
  inputId = "turma_regressao",
  label   = "Selecione a Turma",
  choices = "Todas"
)

selectInput("bimestre_regressao", "Selecione o Bimestre:", choices = c("1º Bimestre", "2º Bimestre", "3º Bimestre", "4º Bimestre"))

actionButton(
  inputId = "atualizar",
  label   = "Atualizar Dados"
)

```

## Análises refinadas

```{r}

htmlOutput("regressao_refinada")

```


# Estudantes em atenção

## {.sidebar}

```{r}

selectInput("bimestre_atencao", "Selecione o Bimestre:", choices = c("Todos", "1º Bimestre", "2º Bimestre", "3º Bimestre", "4º Bimestre"))

actionButton(
  inputId = "atualizar",
  label   = "Atualizar Dados"
)


```


## Column {width=100%}

```{r}

DTOutput("estudantes_atencao")

```

# Base completa

```{r ui-base-completa}

DTOutput("base_completa")

```

# Guia de Uso do Painel

O **CAfe.Lab - para Analisar & Acolher** foi criado para analisar e acompanhar, de forma dinâmica e interativa, as notas, presenças e outras informações de estudantes. Abaixo, você encontra instruções sobre como navegar nas principais seções do painel e tirar proveito de todas as funcionalidades.

---

## Seções Principais

1. Análise Agregada

- **Objetivo**: Mostrar estatísticas (tabelas e gráficos) das notas e valores (presença, quizz, etc.) em nível **agregado**, isto é, sem diferenciar alunos individualmente.
- **Como usar**:
  1. **Turma**: Selecione a turma no campo “Selecione a Turma (Agregado)” ou escolha “Todas” para incluir todas as turmas.
  2. **Indicador (Agregado)**: Escolha qual variável/indicador deseja analisar (ex.: “AV1 - Nota Final”, “AV2 - Nota Final”), ou “Todos” para incluir todas as opções.
  3. **Desagregar por (característica social)**: Permite colorir ou segmentar os dados por variáveis como gênero, cor ou lugar tranquilo de estudo.  
  4. **Tabelas e Gráficos**:
     - **Tabela Agregada**: Exibe a média de cada variável por bimestre (com possibilidade de segmentação).
     - **Gráfico Agregado**: Mostra o boxplot da distribuição de valores.
     - **Gráfico Agregado Temporal**: Apresenta a evolução da média por bimestre em colunas, podendo ser colorida por características sociais.

2. Análise Individual

- **Objetivo**: Focar em um único aluno.
- **Como usar**:
  1. **Selecione a Turma (Individual)**: Limite a pesquisa a uma turma específica ou mantenha “Todas”.
  2. **Selecione o Aluno**: Escolha o aluno na lista gerada (filtrada pela turma anterior).
  3. **Selecione o Indicador (Individual)**: Defina qual atividade/indicador analisar, ou escolha “Todos” para ver tudo.
  4. **Saídas**:
     - **Tabela de Notas**: Lista as notas do aluno em cada bimestre e indicador, com opção de filtros e download.
     - **Gráfico Individual**: Gera colunas por bimestre para o indicador selecionado.
     - **Tabela Individual**: Mostra todas as linhas do aluno (por bimestre e atividade), com detalhes sobre cada variável.

3. Análises Refinadas

- **Objetivo**: Rodar regressões lineares ou hierárquicas para investigar relações entre variáveis sociais e as notas (por Quizz).
- **Como usar**:
  1. **Selecione a Turma**: “Todas” (para regressão com efeito aleatório de turma) ou uma turma específica (modelo linear simples).
  2. **Selecione o Bimestre**: Por exemplo, 1º, 2º, 3º ou 4º Bimestre.
  3. Clique em **Atualizar Dados** caso queira recarregar as informações.
  4. **Resultados**: Exibirá a tabela com coeficientes, erros-padrão e níveis de significância do modelo.

4. Estudantes em Atenção

- **Objetivo**: Mostrar alunos que estão abaixo de determinados patamares em AV2 ou AV3.
- **Como usar**:
  1. **Selecione o Bimestre**: Defina “1º Bimestre”, “2º Bimestre”, e assim por diante, ou “Todos” para ter uma visão geral.
  2. Clique em **Atualizar Dados** para ter certeza de carregar a informação mais recente.
  3. **Tabela**: Lista os estudantes que se encontram em atenção conforme o critério (por exemplo, AV2 < 3 ou AV3 < 5) e se fizeram o quizz.

---

## Dicas de Uso

Dicas de uso

1. **Atualizar Dados**: Caso os dados no Google Sheets sejam modificados ou queira garantir o refresh, clique em **“Atualizar Dados”** (na aba “Agregado” ou “Individual”).
2. **Personalizar**:
   - **Desagregar por**: Útil para analisar como as notas variam entre diferentes grupos (ex. gênero, cor).
   - **Escolher Bimestre**: Indispensável para focar em um período específico e evitar confusão com dados de outro bimestre.

---

## Conclusão

Portanto...

O **CAfe.Lab - para Analisar & Acolher** disponibiliza diversas abas para facilitar a **análise de notas, presença e demais indicadores** em vários níveis – bimestre, turma, aluno e características sociais. Explore “Agregado”, “Individual”, “Estudantes em Atenção” e “Análises Refinadas” para obter insights valiosos sobre o desempenho escolar.

**Dúvidas adicionais?** Consulte este guia ou entre em contato por WhatsApp: **21936189048**. Boas análises!
